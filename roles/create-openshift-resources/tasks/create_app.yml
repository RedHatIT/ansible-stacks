---

- name: Set Default app Facts
  set_fact:
    app: "{{ app_item }}"

- name: Fail for Missing scm_url and base image
  fail: msg="This role requires app.scm_url or app.base_image to be set and non empty"
  when: app.scm_url is not defined and app.base_image is not defined

- name: Fail for Missing app name
  fail: msg="This role requires app.name to be set and non empty"
  when: app.name is not defined and app.name == ''

- name: Fail for Missing project name
  fail: msg="This role requires project.name to be set and non empty"
  when: project.name is not defined and project.name == ''

- name: "Set App Basic Facts"
  set_fact:
    app_options: ''
    app_source: ''
    labels: ''
    environment_variables: ''

- name: "Set App Source with SCM Url and Base Image"
  set_fact:
    app_source: "{{ app.base_image }}~{{ app.scm_url }}"
  when: app.scm_url is defined and app.scm_url != '' and app.base_image is defined and app.base_image != ''

- name: "Set App Source with only Base Image"
  set_fact:
    app_options: "{{ app_options }} --image-stream={{ app.base_image }}"
  when: (app.base_image is defined and app.base_image != '') and (app.scm_url is not defined or app.scm_url == '')

- name: "Set App Source with only SCM Url"
  set_fact:
    app_source: "{{ app.scm_url }}"
  when: (app.scm_url is defined and app.scm_url != '') and (app.base_image is not defined or app.base_image == '')

- name: "Add context-dir Option"
  set_fact:
    app_options: "{{ app_options }} --context-dir={{ app.context_dir }}"
  when: app.context_dir is defined and app.context_dir != ''

- name: "Add name Option"
  set_fact:
    app_options: "{{ app_options }} --name={{ app.name }}"
  when: app.name is defined and app.name != ''



- name: "Set Variable Labels Fact"
  set_fact:
    labels: "{{ app.labels }}"
  when: app.labels is defined and app.labels != '' and app.labels|length > 0

# http://docs.ansible.com/ansible/playbooks_roles.html#dynamic-versus-static-includes
- include: create_labels_string.yml
  when: labels is defined and labels != ''
  static: no

- name: "Add labels_string to app_options"
  set_fact:
    app_options: "{{ app_options }} {{ labels_string }}"
  when: labels_string is defined and labels_string != ''



- name: "Set Environment_Variables Fact"
  set_fact:
    environment_variables: "{{ app.environment_variables }}"
  when: app.environment_variables is defined and app.environment_variables != '' and app.environment_variables|length > 0

# http://docs.ansible.com/ansible/playbooks_roles.html#dynamic-versus-static-includes
- include: create_environment_variables_string.yml
  when: environment_variables is defined and environment_variables != ''
  static: no

- name: "Add environment_variables_string to app_options"
  set_fact:
    app_options: "{{ app_options }} {{ environment_variables_string }}"
  when: environment_variables_string is defined and environment_variables_string != ''

- name: "Determine if {{ app.name }} App Exists"
  command: >
     {{ openshift.common.client_binary }} get dc {{ app.name }} -n {{ project.name }} -o json
  register: get_app_name_result
  failed_when: false
  changed_when: false

# This covers the corner case where we are making an app from an imagestream in the same workspace
# Was useful in testing, not sure if really needed
- name: "Determine if {{ app.base_image }} Imagestream Exists"
  command: >
     {{ openshift.common.client_binary }} get istag {{ app.base_image }}:latest -n {{ project.name }} -o json
  register: get_imagestream_result
  when: ( not ('/' in app.base_image) ) and build_project_name == project.name
  failed_when: false
  changed_when: false
  until: get_imagestream_result.rc == 0
  retries: 12
  delay: 5
  ignore_errors: yes

# http://docs.ansible.com/ansible/playbooks_loops.html#loops-and-includes-in-2-0
- name: Set Facts for promote_image.yml includes
  set_fact:
    app_name: "{{ app.name }}"
    project_name: "{{ project.name }}"
  when: get_app_name_result.rc == 1 and project.promotion_environment is defined and project.promotion_environment == true

- include: promote_image.yml
  when: get_app_name_result.rc == 1 and project.promotion_environment is defined and project.promotion_environment == true

- name: "Create App: {{ app.name }}"
  command: >
    {{ openshift.common.client_binary }} new-app {{ app_source }} -n {{ project.name }} {{ app_options }}
  when: get_app_name_result.rc == 1
  register: create_app_result

- name: "Expose App: {{ app.name }}"
  command: >
    {{ openshift.common.client_binary }} expose service {{ app.name }} -n {{ project.name }}
  when: get_app_name_result.rc == 1 and create_app_result.rc == 0

  # TODO Add a check here to make sure build passed

- name: "Wait For Image To Be Published if Build Environment"
  command: >
     {{ openshift.common.client_binary }} get istag {{ app.name }}:latest -n {{ project.name }} -o json
  register: get_build_imagestream_result
  when: build_project_name == project.name and app.scm_url is defined and app.scm_url != ''
  changed_when: false
  until: get_build_imagestream_result.rc == 0
  retries: 60
  delay: 5 # this is 5 min