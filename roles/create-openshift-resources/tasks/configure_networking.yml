---

- name: Pause to prevent race conditions on the Deployment Config
  pause: 
    seconds: 5

- name: "Get Deployment Config: {{ app.name }}"
  command: >
    {{ openshift.common.client_binary }} get dc {{ app.name }} -n {{ project.name }} -o json
  register: dc_response
  tags:
  - connected

- name: Set Fact for DC object
  set_fact:
    dc: "{{ dc_response.stdout | from_json }}"

- name: Attempt to Apply New Port Specs to Deployment Config
  set_fact: 
    deployment_config:   "{{ dc | apply_ports_spec_config( app ) }}"

- name: Set Fact for Required Deployment Config Updates
  set_fact: 
    update_to_dc_required: true
  when: deployment_config != dc

- name: "Use a unique temporary file to store the Deployment Config object"
  command: mktemp
  register: tempfile
  when: update_to_dc_required is defined

- name: "Prepare the object definition for the Deployment Config"
  copy:
    content:  "{{ deployment_config }}"
    dest: "{{ tempfile.stdout }}"
  when: update_to_dc_required is defined    

- name: "Apply New Deployment Config"
  command: >
    {{ openshift.common.client_binary }} replace dc {{ app.name }} -f {{ tempfile.stdout }} -n {{ project.name }}
  when: update_to_dc_required is defined
  register: replace_dc_result
  until: replace_dc_result.rc == 0
  retries: 12
  delay: 5  # this is 1 min 
  tags:
  - connected

- name: "Deployment Config temporary file clean-up"
  file: 
    path: "{{ tempfile.stdout }}"
    state: absent
  when: update_to_dc_required is defined

- name: "Delete Service: {{ app.name }}"
  command: >
    {{ openshift.common.client_binary }} delete service {{ app.name }} -n {{ project.name }}
  when: update_to_dc_required is defined
  tags:
  - connected

- name: "Create new Service with updated Deployment Config: {{ app.name }}"
  command: >
    {{ openshift.common.client_binary }} expose dc {{ app.name }} -n {{ project.name }}
  when: update_to_dc_required is defined
  tags:
  - connected

# Right now this implementation only supports a single route.

- name: Set Route Fact 
  set_fact:
    route: "{{ app.routes[0] }}"

- name: "Determine If {{ app.name }} Route Exists"
  command: >
     {{ openshift.common.client_binary }} get route {{ app.name }} -n {{ project.name }} -o json
  register: app_name_exists
  failed_when: false
  changed_when: false

- name: "Expose App with default route: {{ app.name }}"
  command: >
    {{ openshift.common.client_binary }} expose service {{ app.name }} -n {{ project.name }}
  when: app_name_exists.rc == 1 and route.route_type is defined and route.route_type == 'default'
  tags:
  - connected

- name: "Expose App with secured route: {{ app.name }}"
  command: >
    {{ openshift.common.client_binary }} create route {{ route | to_create_route_options( app.name ) }} -n {{ project.name }}
  when: app_name_exists.rc == 1 and route.route_type is defined and route.route_type in ['edge','reencrypt','passthrough']
  tags:
  - connected